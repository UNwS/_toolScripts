# The toolScripts bash func
# By Vipin M <vipmadha@gmail.com>

function print_sep()
{
	echo ""
        echo "---------------------------------------------------"
	echo ""
}
function check_git()
{
	if type "git" > /dev/null 2>&1 ; then
        	is_git=1
		#git --version
	else
		is_git=0
	fi
}

function set_default()
{
	if [ -z $TRUE ]; then
		TRUE=1
	fi
        if [ -z $FALSE ]; then
                FALSE=0
        fi
	if [ -f bash_func.lock ]; then
		base_step=$(cat bash_func.lock | sed 's/^[ \t]*//;s/[ \t]*$//' )
	else
		base_step=0
	fi
	if [ -z $base_step ]; then
		base_step=1
		echo $base_step > bash_func.lock
	fi
        if [ -z $run_cmd_debug ]; then
                run_cmd_debug=0
        fi
	if [ -z $EXITONERROR ]; then
		EXITONERROR="yes"
	fi
	if [ -z $run_cmd_log_file ]; then
		run_cmd_log_file="run-cmd.log"
	fi
	if [ -z $EXITFUN ]; then
		EXITFUN="exit_process"
	fi
	if [ -z $base_script ]; then
		base_script=${0}
	fi
	if [ -z $base_shell ]; then
		base_shell=/bin/bash
	fi
	if [ -f tests/_config_dev.yml ]; then
		config_file="_config.yml tests/_config_dev.yml"
	else
		config_file="_config.yml"
	fi
}

function check_cmd()
{
	test_cmd=$1
	IS_cmd=$(type -P $test_cmd | grep $test_cmd | wc -l)
	return $IS_cmd
}

function run_cmd()
{
	$@ > $run_cmd_log_file 2>&1
	ret=$?
	if [ "$ret" -eq "0" ]
	then
		echo "Excuted $@ ..."
		if [ "$run_cmd_debug" -eq "1" ] && [ -s $run_cmd_log_file ]; then
			print_sep
			cat $run_cmd_log_file
			print_sep
		fi
	else
		echo "Error in excuting $@ ..."
		print_sep
		cat $run_cmd_log_file
		print_sep
		if [ "$EXITONERROR" == "no" ]; then
			echo "Not exiting as EXITONERROR is set to $EXITONERROR .."
		else
			exit $ret
		fi
	fi
}

function copy_file()    
{               
        echo "Copy file $1 to $2 ..."
        run_cmd cp $1 $2
}

function clean_file()
{
	#echo "Clean file $1 ..."
	temp=$EXITONERROR
	EXITONERROR="no"
	run_cmd rm -rf $1
	EXITONERROR=$temp
}

# get_file <file name> <file url> <back up file>
function get_file()
{
	if [ -z $3 ]; then
		$3 = "0"
	fi
        #echo "Get $1 from $2 ..."
        if [ -f $1 ]; then
                run_cmd rm -f $1
        fi
	temp=$EXITONERROR
        EXITONERROR="no"
        run_cmd wget $2 -O $1
        EXITONERROR=$temp
        if [ "$ret" -ne "0" ]; then
                echo "Error on retriving $1 ..."
                if [ -f $3 ]; then
                        echo "Using $3 files ..."
                        copy_file $3 $1
			return 0
		else
			echo "No backup file ..."
			return 1
                fi
        fi
}

function get_version()
{
	echo "Get latest github support ..."
	get_file versions.json https://pages.github.com/versions.json deploy/versions.json
}

function make_diploy()
{
        echo "Make docker deply files ..."
	copy_file Gemfile deploy/
	copy_file versions.json deploy/
	copy_file Gemfile.lock deploy/
}

function clean_old_logs()
{
	echo "Clearing old files ..."
	if [ -f .oldfiles ]; then
		for tempfile in $(cat .oldfiles)
		do
			clean_file $tempfile
		done
	else
		clean_file _site
        	clean_file .sass-cache
		clean_file versions.json
		clean_file Gemfile.lock 
		clean_file $run_cmd_log_file
		clean_file commit.template
	fi
}

function git_commit_msg()
{
	echo $COMMIT_MSG > commit.template
}

function git_commit()
{
	git_commit_msg
	if [ "$is_git" -eq 1 ]
	then
		for temp_file in $(git diff --name-only)
		do
			isFile="0"
			if [ -f .gitignore ]
			then
				isFile=$(cat .gitignore | grep -v "^ *\(#.*\|\)$" | grep "\$temp_file\b" | wc -l)
			fi
			if [ "$isFile" -eq "0" ]
			then
				echo "Commiting $temp_file in git ..."
				run_cmd git add $temp_file
				run_cmd git commit $temp_file --file=commit.template
			else
				if [ "$run_cmd_debug" -eq "1" ]; then
		               		print_sep
					echo "This file $temp_file in ignore - If like to add edit .gitignore file ..."
					print_sep
				fi
			fi
		done
	else
		exit 1
	fi		
}

function git_addf()
{
	git_commit_msg
        if [ "$is_git" -eq 1 ]
        then
		temp_file="$1"
                if [ -f "$temp_file" ]
                then
                        echo "Adding $temp_file ..."
                        run_cmd git add "$temp_file"
                        run_cmd git commit "$temp_file" --file=commit.template
                else
			echo "Unable to find the $temp_file file .."
		fi
        else
                exit 1
        fi
}

function check_ingnore()
{
	temp_file="$1"
        while true; do
                read -p "Do you wish to ignore $temp_file permanently?" yn
                case $yn in
                        [Yy]* ) add_ingnore "$temp_file"; break;;
                        [Nn]* ) echo "Skiping $temp_file"; break;;
                        * ) echo "Please answer yes or no.";;
                esac
        done
}

function add_ingnore()
{
	temp_file="$1"
	echo "Adding $temp_file to ingnore ..."
	if [ -f .gitignore ]
	then
		is_tag=$(cat .gitignore | grep "# Added by script - add other file before this." | wc -l)
		if [ "$is_tag" -eq "0" ]
		then
			echo "# Added by script - add other file before this." >> .gitignore
		fi
		echo "$temp_file" >> .gitignore
	else
		echo "# Added by script - add other file before this." >> .gitignore
		echo "$temp_file" >> .gitignore
	fi
}

function add_new()
{
	temp_file="$1"
        while true; do
                read -p "Do you wish to add $temp_file to repo?" yn
                case $yn in
                        [Yy]* ) git_addf "$temp_file"; break;;
                        [Nn]* ) check_ingnore "$temp_file"; break;;
                        * ) echo "Please answer yes or no.";;
                esac
        done
}

function check_new()
{
	IFS=$'\n'
	for temp_file in $(git ls-files --others --exclude-standard)
	do
                if [ -f .gitignore ]
                then    
                        isFile=$(cat .gitignore | grep -v "^ *\(#.*\|\)$" | grep "$temp_file" | wc -l)
                else
                        echo "# Added by script - add other file before this." >> .gitignore
                        echo "$temp_file" >> .gitignore
                        isFile="0"
                fi
		if [ "$isFile" -eq "0" ]
		then
			add_new "$temp_file"
		else
			echo "This file $temp_file in ignore - If like to add edit .gitignore file ..."
		fi
	done
	unset IFS
}

function git_sub_update()
{
	echo "Update submodules ..."
	run_cmd git submodule update --rebase --remote 
 	rebase=$(cat $run_cmd_log_file | grep "rebased into")
	if [[ $rebase == *"rebased into"* ]]
	then	
		echo "Somthing is changed ..."
		run_cmd git submodule foreach --recursive git pull
		echo "Restarting ...."
		base_step=$(cat bash_func.lock | sed 's/^[ \t]*//;s/[ \t]*$//' )
		if [ -z $base_step ]
		then
			base_step=99
			echo $base_step > bash_func.lock
			exit 1
		fi
		if [ "$base_step" -gt "1" ]
		then
			echo "Somthing gone wrong ..."
			exit 1
		else
			base_step=$((base_step+1))
			echo $base_step > bash_func.lock
			$base_shell $base_script
			base_step=$(cat bash_func.lock | sed 's/^[ \t]*//;s/[ \t]*$//' )
			base_step=$((base_step-1))
			echo $base_step > bash_func.lock
			exit 1
		fi
	fi
}

function git_push()
{
        if [ "$is_git" -eq 1 ]
        then
		echo "Pusing chnages to git ..."
                run_cmd git push --all
        else
                exit 1
        fi
}

function gem_update()
{
	echo "Update gems ..."
	run_cmd bundle update
}

function site_build()
{
	if [ ! -f ./versions.json ]; then
		echo "Build with last updated version.json ..."
		copy_file deploy/versions.json versions.json
	fi
	echo "Build jekyll site ..."
	run_cmd bundle exec jekyll build --verbose --trace --config $config_file
}

function run_htmlproof()
{
	echo "Run html proof ..."
	IS_htmlproofer=$(type -P htmlproofer | grep htmlproofer | wc -l)
	if [ "$IS_htmlproofer" == "1" ]; then
		htmlproofer ./_site --disable-external
	else
		run_cmd bundle exec htmlproof ./_site --disable-external
	fi
}

function rm_proff_temp()
{
	echo "Remove htmlproof temp files ..."
	run_cmd rm -rf tmp
}

function site_run()
{
	port=$1
        if [ ! -f ./versions.json ]; then
                echo "Build with last updated version.json ..."
                copy_file deploy/versions.json versions.json
        fi
	echo "Run jekyll server ...."
        if [ "$run_cmd_debug" -eq "1" ]; then
		print_sep
                bundle exec jekyll serve --port $port --verbose --trace --config $config_file
                print_sep
	else
		run_cmd bundle exec jekyll serve --port $port --verbose --trace --config $config_file
	fi
}

function link_draft()
{
	if [ -d _draft ] || [ -L _drafts ]; then
		echo "The draft present ..."
	else
		if [ -d ../../../work-personal/_drafts ]; then
			echo "Creting _draft link ..."
			run_cmd ln -s ../../../work-personal/_drafts .
		fi
	fi 
}

function jenkins_get_cli()
{
	if [ "$is_java" -eq 0 ] 
	then
		echo "Java not found ..."
		echo "jenkins-cli need java ..."
	else
    		if [ -f ft_bin/jenkins-cli.jar ]
		then
			echo "jenkins-cli found ..."
			is_jenkins_cli=1
		else
                        echo "jenkins-cli not found ..."
			is_jenkins_cli=0
			get_file ft_bin/jenkins-cli.jar $JENKINS_URL/jnlpJars/jenkins-cli.jar
		fi
	fi
}

function jenkins_cli_run()
{
	if [ "$is_java" -eq 1 ] && [ "$is_jenkins_cli" -eq 1 ]
	then
		run_cmd java -jar ft_bin/jenkins-cli.jar -s $JENKINS_URL/ $@
    	fi
}

function jenkins_check_auth()
{	
	temp=$run_cmd_debug
	run_cmd_debug=1
	is_auth=$(jenkins_cli_run who-am-i | grep "authenticated" | wc -l)
	run_cmd_debug=$temp
	if [ "$is_auth" -eq 1 ]
	then
		echo "The jenkins is authanticated ..."
	else
		echo "The jenkins is not authaticated ($is_auth) ..."
		is_auth=0
	fi
}

function jenkins_get_all_jobs()
{
        if [ "$is_auth" -eq 1 ] 
        then
		for temp_jobs in $(echo $JENKINS_JOBS | sed "s/,/ /g")
		do
			echo "Getting XML configuration for $temp_jobs ..."
			if [ -d $temp_jobs ]; then
				mkdir $temp_jobs
			fi
    			jenkins_cli_run get-job $temp_jobs > $temp_jobs/job.xml
		done
	else
		exit 1
	fi
}

function jenkins_get_plugins()
{
        if [ "$is_auth" -eq 1 ]
        then
		echo "Getting list of plugins ..."
                jenkins_cli_run list-plugins >  list-plugins.txt
        else
                exit 1
        fi
}

set_default
trap $EXITFUN 1 2 3 6 15

if [ -z "$1" ]
then
	echo "Added bash_func from _toolScript ..."
elif [ "${0##*/}" == "bash_func" ]
then
	echo ${@} > /tmp/bash_func.tmp.sh
	chmod 755 /tmp/bash_func.tmp.sh
	. /tmp/bash_func.tmp.sh
else
	echo "Somthing gone wrong ..."
fi
